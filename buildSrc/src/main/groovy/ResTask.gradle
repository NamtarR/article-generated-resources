import groovy.json.JsonSlurper
import groovy.xml.MarkupBuilder
import org.gradle.api.DefaultTask
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.file.RegularFileProperty
import org.gradle.api.tasks.InputFile
import org.gradle.api.tasks.OutputFile
import org.gradle.api.tasks.TaskAction
import org.gradle.work.Incremental
import org.gradle.work.InputChanges

class ResTaskPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {
        def extension = project.getExtensions()
                .create("resTask", ResTaskPluginExtension)

        def android = project.getExtensions().findByName("android")

        android.applicationVariants.all { variant ->
            def file = project.file("build/generated/res/res-task/main")
            def files = project.files(file)
            def taskName = "generateStringsFile${variant.name.capitalize()}"
            def task = project.tasks.create(taskName, ResTask)

            task.inputFile = project.rootProject.file(extension.inputFile)
            task.outputFile = project.file("build/generated/res/res-task/main/values/strings.xml")

            files.builtBy(task)
            variant.registerGeneratedResFolders(files)
        }
    }
}

abstract class ResTask extends DefaultTask {

    @Incremental
    @InputFile
    abstract RegularFileProperty getInputFile()

    @OutputFile
    abstract RegularFileProperty getOutputFile()

    @TaskAction
    void execute(InputChanges changes) {
        changes.getFileChanges(inputFile).each { change ->
            if (change.changeType == ChangeType.REMOVED) {
                println("Skipping task, because input file is removed")
                return
            }

            def input = inputFile.get().asFile
            def output = outputFile.get().asFile
            run(input, output)
        }
    }

    void run(File input, File output) {
        output.parentFile.mkdirs()

        output.withWriter("UTF-8") { writer ->
            def json = new JsonSlurper().parseText(input.text)
            def xml = new MarkupBuilder(new IndentPrinter(writer, "    ", true, true))
            def mkp = xml.getMkp()

            xml.setDoubleQuotes(true)
            mkp.xmlDeclaration(version: "1.0", encoding: "utf-8")
            mkp.comment("Generated at ${new Date()}")
            mkp.yield "\r\n"

            xml.resources {
                json.each { key, value ->
                    string(name: key) { mkp.yield(value) }
                }
            }
        }
    }
}

class ResTaskPluginExtension {
    var String inputFile
}